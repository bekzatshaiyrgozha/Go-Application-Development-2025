package main

import (
	"fmt"
	"html/template"
	"net/http"
	"sync"
)

// –ü–æ—Å—Ç—Ç–∞—Ä–¥—ã —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
type Post struct {
	Title   string
	Content string
}

var (
	posts []Post       // –ë–∞—Ä–ª—ã“õ –ø–æ—Å—Ç—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ
	mutex sync.RWMutex // –ë—ñ—Ä —É–∞“õ—ã—Ç—Ç–∞ –±—ñ—Ä–Ω–µ—à–µ –∞–¥–∞–º –∂–∞–∑–∞ –∞–ª–º–∞—É—ã “Ø—à—ñ–Ω
)

// –ë–∞—Å—Ç—ã –±–µ—Ç ("/")
func homeHandler(w http.ResponseWriter, r *http.Request) {
	tmpl, _ := template.ParseFiles("templates/index.html")
	tmpl.Execute(w, nil)
}

// –ë–ª–æ–≥ –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω —à—ã“ì–∞—Ä—É ("/posts")
func postsHandler(w http.ResponseWriter, r *http.Request) {
	tmpl, _ := template.ParseFiles("templates/posts.html")
	mutex.RLock()
	tmpl.Execute(w, posts)
	mutex.RUnlock()
}

// –ñ–∞“£–∞ –ø–æ—Å—Ç “õ–æ—Å—É ("/new")
func newPostHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodPost {
		title := r.FormValue("title")
		content := r.FormValue("content")

		if title != "" && content != "" {
			mutex.Lock()
			posts = append(posts, Post{Title: title, Content: content})
			mutex.Unlock()
		}

		http.Redirect(w, r, "/posts", http.StatusSeeOther)
		return
	}

	tmpl, _ := template.ParseFiles("templates/new.html")
	tmpl.Execute(w, nil)
}

func main() {
	// –ú–∞—Ä—à—Ä—É—Ç—Ç–∞—Ä–¥—ã “õ–æ—Å—É
	http.HandleFunc("/", homeHandler)
	http.HandleFunc("/posts", postsHandler)
	http.HandleFunc("/new", newPostHandler)

	// –°—Ç–∞—Ç–∏–∫–∞–ª—ã“õ —Ñ–∞–π–ª–¥–∞—Ä–¥—ã “õ–æ—Å—É (CSS)
	http.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("static"))))

	fmt.Println("üöÄ –°–µ—Ä–≤–µ—Ä 8080 –ø–æ—Ä—Ç—ã–Ω–¥–∞ –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä...")
	http.ListenAndServe(":8080", nil)
}
